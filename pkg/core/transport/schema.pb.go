// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: schema.proto

package transport

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StreamType int32

const (
	StreamType_NONE         StreamType = 0
	StreamType_VIDEO_RAW    StreamType = 1
	StreamType_VIDEO_PNG    StreamType = 2
	StreamType_VIDEO_JPG    StreamType = 3
	StreamType_VIDEO_H264   StreamType = 4
	StreamType_VIDEO_H265   StreamType = 5
	StreamType_FEATURES_DNN StreamType = 16
	StreamType_FEATURES_CV  StreamType = 17
	StreamType_AUDIO_PCM    StreamType = 32
	StreamType_AUDIO_MP3    StreamType = 33
	StreamType_AUDIO_OGG    StreamType = 34
	StreamType_SENSORS_RAW  StreamType = 64
)

var StreamType_name = map[int32]string{
	0:  "NONE",
	1:  "VIDEO_RAW",
	2:  "VIDEO_PNG",
	3:  "VIDEO_JPG",
	4:  "VIDEO_H264",
	5:  "VIDEO_H265",
	16: "FEATURES_DNN",
	17: "FEATURES_CV",
	32: "AUDIO_PCM",
	33: "AUDIO_MP3",
	34: "AUDIO_OGG",
	64: "SENSORS_RAW",
}

var StreamType_value = map[string]int32{
	"NONE":         0,
	"VIDEO_RAW":    1,
	"VIDEO_PNG":    2,
	"VIDEO_JPG":    3,
	"VIDEO_H264":   4,
	"VIDEO_H265":   5,
	"FEATURES_DNN": 16,
	"FEATURES_CV":  17,
	"AUDIO_PCM":    32,
	"AUDIO_MP3":    33,
	"AUDIO_OGG":    34,
	"SENSORS_RAW":  64,
}

func (x StreamType) String() string {
	return proto.EnumName(StreamType_name, int32(x))
}

func (StreamType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{0}
}

type StreamMsg struct {
	Type      StreamType `protobuf:"varint,1,opt,name=Type,proto3,enum=transport.StreamType" json:"Type,omitempty"`
	Index     int64      `protobuf:"varint,2,opt,name=Index,proto3" json:"Index,omitempty"`
	Timestamp int64      `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Data      Blob       `protobuf:"bytes,7,opt,name=Data,proto3,customtype=Blob" json:"Data"`
}

func (m *StreamMsg) Reset()      { *m = StreamMsg{} }
func (*StreamMsg) ProtoMessage() {}
func (*StreamMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{0}
}
func (m *StreamMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamMsg.Merge(m, src)
}
func (m *StreamMsg) XXX_Size() int {
	return m.Size()
}
func (m *StreamMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamMsg.DiscardUnknown(m)
}

var xxx_messageInfo_StreamMsg proto.InternalMessageInfo

func (m *StreamMsg) GetType() StreamType {
	if m != nil {
		return m.Type
	}
	return StreamType_NONE
}

func (m *StreamMsg) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *StreamMsg) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type StatusMsg struct {
	OWD     int64   `protobuf:"varint,1,opt,name=OWD,proto3" json:"OWD,omitempty"`
	RTT     int64   `protobuf:"varint,2,opt,name=RTT,proto3" json:"RTT,omitempty"`
	Jitter  int64   `protobuf:"varint,3,opt,name=Jitter,proto3" json:"Jitter,omitempty"`
	Battery float32 `protobuf:"fixed32,4,opt,name=Battery,proto3" json:"Battery,omitempty"`
	Health  float32 `protobuf:"fixed32,5,opt,name=Health,proto3" json:"Health,omitempty"`
}

func (m *StatusMsg) Reset()      { *m = StatusMsg{} }
func (*StatusMsg) ProtoMessage() {}
func (*StatusMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{1}
}
func (m *StatusMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusMsg.Merge(m, src)
}
func (m *StatusMsg) XXX_Size() int {
	return m.Size()
}
func (m *StatusMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusMsg.DiscardUnknown(m)
}

var xxx_messageInfo_StatusMsg proto.InternalMessageInfo

func (m *StatusMsg) GetOWD() int64 {
	if m != nil {
		return m.OWD
	}
	return 0
}

func (m *StatusMsg) GetRTT() int64 {
	if m != nil {
		return m.RTT
	}
	return 0
}

func (m *StatusMsg) GetJitter() int64 {
	if m != nil {
		return m.Jitter
	}
	return 0
}

func (m *StatusMsg) GetBattery() float32 {
	if m != nil {
		return m.Battery
	}
	return 0
}

func (m *StatusMsg) GetHealth() float32 {
	if m != nil {
		return m.Health
	}
	return 0
}

type ChatMsg struct {
	Timestamp int64  `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Username  string `protobuf:"bytes,2,opt,name=Username,proto3" json:"Username,omitempty"`
	Message   string `protobuf:"bytes,7,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *ChatMsg) Reset()      { *m = ChatMsg{} }
func (*ChatMsg) ProtoMessage() {}
func (*ChatMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{2}
}
func (m *ChatMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatMsg.Merge(m, src)
}
func (m *ChatMsg) XXX_Size() int {
	return m.Size()
}
func (m *ChatMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ChatMsg proto.InternalMessageInfo

func (m *ChatMsg) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ChatMsg) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ChatMsg) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type EventMsg struct {
	Id    uint64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Flags []uint64  `protobuf:"varint,2,rep,packed,name=Flags,proto3" json:"Flags,omitempty"`
	Data  []float32 `protobuf:"fixed32,7,rep,packed,name=Data,proto3" json:"Data,omitempty"`
}

func (m *EventMsg) Reset()      { *m = EventMsg{} }
func (*EventMsg) ProtoMessage() {}
func (*EventMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{3}
}
func (m *EventMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMsg.Merge(m, src)
}
func (m *EventMsg) XXX_Size() int {
	return m.Size()
}
func (m *EventMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMsg.DiscardUnknown(m)
}

var xxx_messageInfo_EventMsg proto.InternalMessageInfo

func (m *EventMsg) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventMsg) GetFlags() []uint64 {
	if m != nil {
		return m.Flags
	}
	return nil
}

func (m *EventMsg) GetData() []float32 {
	if m != nil {
		return m.Data
	}
	return nil
}

type RobotMsg struct {
	Id           []byte                `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name         string                `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description  string                `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Capabilities []RobotMsg_Capability `protobuf:"bytes,4,rep,name=Capabilities,proto3" json:"Capabilities"`
}

func (m *RobotMsg) Reset()      { *m = RobotMsg{} }
func (*RobotMsg) ProtoMessage() {}
func (*RobotMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{4}
}
func (m *RobotMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RobotMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RobotMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RobotMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RobotMsg.Merge(m, src)
}
func (m *RobotMsg) XXX_Size() int {
	return m.Size()
}
func (m *RobotMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_RobotMsg.DiscardUnknown(m)
}

var xxx_messageInfo_RobotMsg proto.InternalMessageInfo

func (m *RobotMsg) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RobotMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RobotMsg) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RobotMsg) GetCapabilities() []RobotMsg_Capability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

type RobotMsg_Capability struct {
	// NOTE:
	// Negative Id refers to stream types:
	//   streamType: abs(Id)
	// Positive Id refers to Event types.
	Id          int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (m *RobotMsg_Capability) Reset()      { *m = RobotMsg_Capability{} }
func (*RobotMsg_Capability) ProtoMessage() {}
func (*RobotMsg_Capability) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{4, 0}
}
func (m *RobotMsg_Capability) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RobotMsg_Capability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RobotMsg_Capability.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RobotMsg_Capability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RobotMsg_Capability.Merge(m, src)
}
func (m *RobotMsg_Capability) XXX_Size() int {
	return m.Size()
}
func (m *RobotMsg_Capability) XXX_DiscardUnknown() {
	xxx_messageInfo_RobotMsg_Capability.DiscardUnknown(m)
}

var xxx_messageInfo_RobotMsg_Capability proto.InternalMessageInfo

func (m *RobotMsg_Capability) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RobotMsg_Capability) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RobotMsg_Capability) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Robot struct {
	Timestamp int64       `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Status    StatusMsg   `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status"`
	Robot     RobotMsg    `protobuf:"bytes,3,opt,name=Robot,proto3" json:"Robot"`
	Events    []EventMsg  `protobuf:"bytes,4,rep,name=Events,proto3" json:"Events"`
	Stream    []StreamMsg `protobuf:"bytes,5,rep,name=Stream,proto3" json:"Stream"`
	Signature Blob        `protobuf:"bytes,6,opt,name=Signature,proto3,customtype=Blob" json:"Signature"`
}

func (m *Robot) Reset()      { *m = Robot{} }
func (*Robot) ProtoMessage() {}
func (*Robot) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5fb4d8cc22d66a, []int{5}
}
func (m *Robot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Robot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Robot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Robot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Robot.Merge(m, src)
}
func (m *Robot) XXX_Size() int {
	return m.Size()
}
func (m *Robot) XXX_DiscardUnknown() {
	xxx_messageInfo_Robot.DiscardUnknown(m)
}

var xxx_messageInfo_Robot proto.InternalMessageInfo

func (m *Robot) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Robot) GetStatus() StatusMsg {
	if m != nil {
		return m.Status
	}
	return StatusMsg{}
}

func (m *Robot) GetRobot() RobotMsg {
	if m != nil {
		return m.Robot
	}
	return RobotMsg{}
}

func (m *Robot) GetEvents() []EventMsg {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *Robot) GetStream() []StreamMsg {
	if m != nil {
		return m.Stream
	}
	return nil
}

func init() {
	proto.RegisterEnum("transport.StreamType", StreamType_name, StreamType_value)
	proto.RegisterType((*StreamMsg)(nil), "transport.StreamMsg")
	proto.RegisterType((*StatusMsg)(nil), "transport.StatusMsg")
	proto.RegisterType((*ChatMsg)(nil), "transport.ChatMsg")
	proto.RegisterType((*EventMsg)(nil), "transport.EventMsg")
	proto.RegisterType((*RobotMsg)(nil), "transport.RobotMsg")
	proto.RegisterType((*RobotMsg_Capability)(nil), "transport.RobotMsg.Capability")
	proto.RegisterType((*Robot)(nil), "transport.Robot")
}

func init() { proto.RegisterFile("schema.proto", fileDescriptor_1c5fb4d8cc22d66a) }

var fileDescriptor_1c5fb4d8cc22d66a = []byte{
	// 709 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xbd, 0x4e, 0x1b, 0x4b,
	0x14, 0xf6, 0xec, 0xae, 0x8d, 0xf7, 0xd8, 0x97, 0xbb, 0x77, 0x2e, 0xf7, 0x6a, 0x85, 0xa2, 0x65,
	0xe3, 0xca, 0xa1, 0x30, 0xc2, 0x90, 0xd4, 0xe0, 0x1f, 0x8c, 0x91, 0xfc, 0xa3, 0xb1, 0x81, 0x2a,
	0x42, 0x63, 0x98, 0xd8, 0x2b, 0xd9, 0x5e, 0x6b, 0x77, 0x8c, 0xe2, 0x2e, 0x0f, 0x90, 0x22, 0x2f,
	0x90, 0x3e, 0x8f, 0x90, 0x32, 0x45, 0x0a, 0x4a, 0x4a, 0x94, 0x02, 0x05, 0xd3, 0x47, 0x29, 0x53,
	0x46, 0x33, 0xbb, 0xf6, 0xda, 0x04, 0x29, 0x52, 0xba, 0xf3, 0x9d, 0x9f, 0xef, 0x7c, 0x73, 0xce,
	0x9e, 0x85, 0xb4, 0x7f, 0xde, 0x63, 0x03, 0x9a, 0x1b, 0x79, 0x2e, 0x77, 0xb1, 0xce, 0x3d, 0x3a,
	0xf4, 0x47, 0xae, 0xc7, 0xd7, 0x77, 0xbb, 0x0e, 0xef, 0x8d, 0x3b, 0xb9, 0x73, 0x77, 0xb0, 0xd5,
	0x75, 0xbb, 0xee, 0x96, 0xcc, 0xe8, 0x8c, 0x5f, 0xed, 0x5d, 0x6e, 0xe7, 0x76, 0x72, 0x79, 0xe9,
	0x94, 0x3e, 0x69, 0x05, 0x04, 0x99, 0xb7, 0x08, 0xf4, 0x16, 0xf7, 0x18, 0x1d, 0xd4, 0xfc, 0x2e,
	0x7e, 0x06, 0x5a, 0x7b, 0x32, 0x62, 0x26, 0xb2, 0x51, 0x76, 0x35, 0xff, 0x5f, 0x6e, 0xce, 0x9e,
	0x0b, 0x72, 0x44, 0x90, 0xc8, 0x14, 0xbc, 0x06, 0xf1, 0xea, 0xf0, 0x82, 0xbd, 0x36, 0x15, 0x1b,
	0x65, 0x55, 0x12, 0x00, 0xfc, 0x04, 0xf4, 0xb6, 0x33, 0x60, 0x3e, 0xa7, 0x83, 0x91, 0xa9, 0xca,
	0x48, 0xe4, 0xc0, 0x36, 0x68, 0x25, 0xca, 0xa9, 0xb9, 0x62, 0xa3, 0x6c, 0xba, 0x90, 0xbe, 0xba,
	0xdd, 0x88, 0x7d, 0xb9, 0xdd, 0xd0, 0x0a, 0x7d, 0xb7, 0x43, 0x64, 0x24, 0x33, 0x11, 0x6a, 0x28,
	0x1f, 0xfb, 0x42, 0x8d, 0x01, 0x6a, 0xe3, 0xb4, 0x24, 0xc5, 0xa8, 0x44, 0x98, 0xc2, 0x43, 0xda,
	0xed, 0xb0, 0xa5, 0x30, 0xf1, 0xff, 0x90, 0x38, 0x72, 0x38, 0x67, 0x5e, 0xd8, 0x2d, 0x44, 0xd8,
	0x84, 0x95, 0x02, 0x15, 0xd6, 0xc4, 0xd4, 0x6c, 0x94, 0x55, 0xc8, 0x0c, 0x8a, 0x8a, 0x43, 0x46,
	0xfb, 0xbc, 0x67, 0xc6, 0x65, 0x20, 0x44, 0x99, 0x97, 0xb0, 0x52, 0xec, 0x51, 0x2e, 0x1a, 0x2f,
	0xbd, 0x02, 0x3d, 0x7c, 0xc5, 0x3a, 0x24, 0x8f, 0x7d, 0xe6, 0x0d, 0xe9, 0x80, 0x49, 0x25, 0x3a,
	0x99, 0x63, 0xd1, 0xb6, 0xc6, 0x7c, 0x9f, 0x76, 0x99, 0x7c, 0xa4, 0x4e, 0x66, 0x30, 0x53, 0x82,
	0x64, 0xf9, 0x92, 0x0d, 0x25, 0xff, 0x2a, 0x28, 0xd5, 0x0b, 0x49, 0xac, 0x11, 0xa5, 0x7a, 0x21,
	0x66, 0x79, 0xd0, 0xa7, 0x5d, 0xdf, 0x54, 0x6c, 0x35, 0xab, 0x91, 0x00, 0x60, 0x3c, 0x9f, 0x96,
	0x9a, 0x55, 0xc2, 0xf9, 0x7c, 0x43, 0x90, 0x24, 0x6e, 0xc7, 0x7d, 0x40, 0x93, 0x96, 0x34, 0x18,
	0xb4, 0x7a, 0x24, 0x4a, 0xda, 0xd8, 0x86, 0x54, 0x89, 0xf9, 0xe7, 0x9e, 0x33, 0xe2, 0x8e, 0x3b,
	0x94, 0x43, 0xd2, 0xc9, 0xa2, 0x0b, 0x1f, 0x42, 0xba, 0x48, 0x47, 0xb4, 0xe3, 0xf4, 0x1d, 0xee,
	0x30, 0xdf, 0xd4, 0x6c, 0x35, 0x9b, 0xca, 0x5b, 0x0b, 0xbb, 0x9f, 0x35, 0xcc, 0xcd, 0xf3, 0x26,
	0x05, 0x4d, 0x2c, 0x8f, 0x2c, 0x55, 0xae, 0x13, 0x80, 0x28, 0x63, 0x41, 0x9d, 0xfa, 0xe7, 0xea,
	0x32, 0xef, 0x15, 0x88, 0xcb, 0xfe, 0xbf, 0x59, 0x4a, 0x1e, 0x12, 0xc1, 0x87, 0x23, 0xf9, 0x53,
	0xf9, 0xb5, 0xa5, 0x6f, 0x37, 0xfc, 0xa2, 0x42, 0xd5, 0x61, 0x26, 0xde, 0x0a, 0xa9, 0x65, 0xdf,
	0x54, 0xfe, 0xdf, 0x47, 0x9e, 0x1c, 0x56, 0x84, 0x12, 0xb6, 0x21, 0x21, 0x77, 0x38, 0x1b, 0xd2,
	0x62, 0xc5, 0x6c, 0xb9, 0xb3, 0x1e, 0x41, 0x62, 0xa0, 0x4b, 0x9c, 0x8e, 0x19, 0x97, 0x25, 0x6b,
	0xbf, 0xdc, 0xd4, 0x92, 0x2e, 0xe1, 0xc0, 0x9b, 0xa0, 0xb7, 0x9c, 0xee, 0x90, 0xf2, 0xb1, 0xc7,
	0xcc, 0xc4, 0x23, 0xb7, 0x12, 0x85, 0x37, 0x3f, 0x23, 0x80, 0xe8, 0x36, 0x71, 0x12, 0xb4, 0x7a,
	0xa3, 0x5e, 0x36, 0x62, 0xf8, 0x2f, 0xd0, 0x4f, 0xaa, 0xa5, 0x72, 0xe3, 0x8c, 0xec, 0x9f, 0x1a,
	0x28, 0x82, 0xcd, 0x7a, 0xc5, 0x50, 0x22, 0x78, 0xd4, 0xac, 0x18, 0x2a, 0x5e, 0x05, 0x08, 0xe0,
	0x61, 0xfe, 0xc5, 0xae, 0xa1, 0x2d, 0xe1, 0xe7, 0x46, 0x1c, 0x1b, 0x90, 0x3e, 0x28, 0xef, 0xb7,
	0x8f, 0x49, 0xb9, 0x75, 0x56, 0xaa, 0xd7, 0x0d, 0x03, 0xff, 0x0d, 0xa9, 0xb9, 0xa7, 0x78, 0x62,
	0xfc, 0x23, 0x18, 0xf7, 0x8f, 0x4b, 0xd5, 0xc6, 0x59, 0xb3, 0x58, 0x33, 0xec, 0x08, 0xd6, 0x9a,
	0x3b, 0xc6, 0xd3, 0x08, 0x36, 0x2a, 0x15, 0x23, 0x23, 0xaa, 0x5b, 0xe5, 0x7a, 0xab, 0x41, 0x5a,
	0x52, 0xde, 0x5e, 0x61, 0xf7, 0xe6, 0xce, 0x8a, 0x7d, 0xbf, 0xb3, 0xd0, 0x8f, 0x3b, 0x0b, 0xbd,
	0x99, 0x5a, 0xe8, 0xc3, 0xd4, 0x42, 0x1f, 0xa7, 0x16, 0xfa, 0x34, 0xb5, 0xd0, 0xd5, 0xd4, 0x42,
	0xd7, 0x53, 0x0b, 0x7d, 0x9d, 0x5a, 0xe8, 0xdd, 0xbd, 0x15, 0xbb, 0xbe, 0xb7, 0x62, 0x37, 0xf7,
	0x56, 0xac, 0x93, 0x90, 0xff, 0xb0, 0x9d, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x97, 0x39, 0x3a,
	0xf9, 0x14, 0x05, 0x00, 0x00,
}

func (this *StreamMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamMsg)
	if !ok {
		that2, ok := that.(StreamMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *StatusMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatusMsg)
	if !ok {
		that2, ok := that.(StatusMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OWD != that1.OWD {
		return false
	}
	if this.RTT != that1.RTT {
		return false
	}
	if this.Jitter != that1.Jitter {
		return false
	}
	if this.Battery != that1.Battery {
		return false
	}
	if this.Health != that1.Health {
		return false
	}
	return true
}
func (this *ChatMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChatMsg)
	if !ok {
		that2, ok := that.(ChatMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *EventMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EventMsg)
	if !ok {
		that2, ok := that.(EventMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Flags) != len(that1.Flags) {
		return false
	}
	for i := range this.Flags {
		if this.Flags[i] != that1.Flags[i] {
			return false
		}
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	return true
}
func (this *RobotMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RobotMsg)
	if !ok {
		that2, ok := that.(RobotMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Id, that1.Id) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Capabilities) != len(that1.Capabilities) {
		return false
	}
	for i := range this.Capabilities {
		if !this.Capabilities[i].Equal(&that1.Capabilities[i]) {
			return false
		}
	}
	return true
}
func (this *RobotMsg_Capability) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RobotMsg_Capability)
	if !ok {
		that2, ok := that.(RobotMsg_Capability)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *Robot) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Robot)
	if !ok {
		that2, ok := that.(Robot)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !this.Robot.Equal(&that1.Robot) {
		return false
	}
	if len(this.Events) != len(that1.Events) {
		return false
	}
	for i := range this.Events {
		if !this.Events[i].Equal(&that1.Events[i]) {
			return false
		}
	}
	if len(this.Stream) != len(that1.Stream) {
		return false
	}
	for i := range this.Stream {
		if !this.Stream[i].Equal(&that1.Stream[i]) {
			return false
		}
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	return true
}
func (this *StreamMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&transport.StreamMsg{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StatusMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&transport.StatusMsg{")
	s = append(s, "OWD: "+fmt.Sprintf("%#v", this.OWD)+",\n")
	s = append(s, "RTT: "+fmt.Sprintf("%#v", this.RTT)+",\n")
	s = append(s, "Jitter: "+fmt.Sprintf("%#v", this.Jitter)+",\n")
	s = append(s, "Battery: "+fmt.Sprintf("%#v", this.Battery)+",\n")
	s = append(s, "Health: "+fmt.Sprintf("%#v", this.Health)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChatMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&transport.ChatMsg{")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EventMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&transport.EventMsg{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Flags: "+fmt.Sprintf("%#v", this.Flags)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RobotMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&transport.RobotMsg{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	if this.Capabilities != nil {
		vs := make([]RobotMsg_Capability, len(this.Capabilities))
		for i := range vs {
			vs[i] = this.Capabilities[i]
		}
		s = append(s, "Capabilities: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RobotMsg_Capability) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&transport.RobotMsg_Capability{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Robot) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&transport.Robot{")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "Status: "+strings.Replace(this.Status.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Robot: "+strings.Replace(this.Robot.GoString(), `&`, ``, 1)+",\n")
	if this.Events != nil {
		vs := make([]EventMsg, len(this.Events))
		for i := range vs {
			vs[i] = this.Events[i]
		}
		s = append(s, "Events: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	if this.Stream != nil {
		vs := make([]StreamMsg, len(this.Stream))
		for i := range vs {
			vs[i] = this.Stream[i]
		}
		s = append(s, "Stream: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSchema(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *StreamMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Data.Size()
		i -= size
		if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSchema(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.Timestamp != 0 {
		i = encodeVarintSchema(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	if m.Index != 0 {
		i = encodeVarintSchema(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintSchema(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StatusMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Health != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Health))))
		i--
		dAtA[i] = 0x2d
	}
	if m.Battery != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Battery))))
		i--
		dAtA[i] = 0x25
	}
	if m.Jitter != 0 {
		i = encodeVarintSchema(dAtA, i, uint64(m.Jitter))
		i--
		dAtA[i] = 0x18
	}
	if m.RTT != 0 {
		i = encodeVarintSchema(dAtA, i, uint64(m.RTT))
		i--
		dAtA[i] = 0x10
	}
	if m.OWD != 0 {
		i = encodeVarintSchema(dAtA, i, uint64(m.OWD))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChatMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSchema(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintSchema(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != 0 {
		i = encodeVarintSchema(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			f1 := math.Float32bits(float32(m.Data[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f1))
		}
		i = encodeVarintSchema(dAtA, i, uint64(len(m.Data)*4))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Flags) > 0 {
		dAtA3 := make([]byte, len(m.Flags)*10)
		var j2 int
		for _, num := range m.Flags {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintSchema(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintSchema(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RobotMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RobotMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RobotMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Capabilities) > 0 {
		for iNdEx := len(m.Capabilities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Capabilities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchema(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintSchema(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSchema(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSchema(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RobotMsg_Capability) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RobotMsg_Capability) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RobotMsg_Capability) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintSchema(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSchema(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintSchema(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Robot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Robot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Robot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Signature.Size()
		i -= size
		if _, err := m.Signature.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSchema(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Stream) > 0 {
		for iNdEx := len(m.Stream) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stream[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchema(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchema(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.Robot.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSchema(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSchema(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Timestamp != 0 {
		i = encodeVarintSchema(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSchema(dAtA []byte, offset int, v uint64) int {
	offset -= sovSchema(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedStreamMsg(r randySchema, easy bool) *StreamMsg {
	this := &StreamMsg{}
	this.Type = StreamType([]int32{0, 1, 2, 3, 4, 5, 16, 17, 32, 33, 34, 64}[r.Intn(12)])
	this.Index = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Index *= -1
	}
	this.Timestamp = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Timestamp *= -1
	}
	v1 := NewPopulatedBlob(r)
	this.Data = *v1
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStatusMsg(r randySchema, easy bool) *StatusMsg {
	this := &StatusMsg{}
	this.OWD = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.OWD *= -1
	}
	this.RTT = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.RTT *= -1
	}
	this.Jitter = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Jitter *= -1
	}
	this.Battery = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Battery *= -1
	}
	this.Health = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Health *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedChatMsg(r randySchema, easy bool) *ChatMsg {
	this := &ChatMsg{}
	this.Timestamp = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Timestamp *= -1
	}
	this.Username = string(randStringSchema(r))
	this.Message = string(randStringSchema(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEventMsg(r randySchema, easy bool) *EventMsg {
	this := &EventMsg{}
	this.Id = uint64(uint64(r.Uint32()))
	v2 := r.Intn(10)
	this.Flags = make([]uint64, v2)
	for i := 0; i < v2; i++ {
		this.Flags[i] = uint64(uint64(r.Uint32()))
	}
	v3 := r.Intn(10)
	this.Data = make([]float32, v3)
	for i := 0; i < v3; i++ {
		this.Data[i] = float32(r.Float32())
		if r.Intn(2) == 0 {
			this.Data[i] *= -1
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRobotMsg(r randySchema, easy bool) *RobotMsg {
	this := &RobotMsg{}
	v4 := r.Intn(100)
	this.Id = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.Id[i] = byte(r.Intn(256))
	}
	this.Name = string(randStringSchema(r))
	this.Description = string(randStringSchema(r))
	if r.Intn(5) != 0 {
		v5 := r.Intn(5)
		this.Capabilities = make([]RobotMsg_Capability, v5)
		for i := 0; i < v5; i++ {
			v6 := NewPopulatedRobotMsg_Capability(r, easy)
			this.Capabilities[i] = *v6
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRobotMsg_Capability(r randySchema, easy bool) *RobotMsg_Capability {
	this := &RobotMsg_Capability{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Name = string(randStringSchema(r))
	this.Description = string(randStringSchema(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRobot(r randySchema, easy bool) *Robot {
	this := &Robot{}
	this.Timestamp = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Timestamp *= -1
	}
	v7 := NewPopulatedStatusMsg(r, easy)
	this.Status = *v7
	v8 := NewPopulatedRobotMsg(r, easy)
	this.Robot = *v8
	if r.Intn(5) != 0 {
		v9 := r.Intn(5)
		this.Events = make([]EventMsg, v9)
		for i := 0; i < v9; i++ {
			v10 := NewPopulatedEventMsg(r, easy)
			this.Events[i] = *v10
		}
	}
	if r.Intn(5) != 0 {
		v11 := r.Intn(5)
		this.Stream = make([]StreamMsg, v11)
		for i := 0; i < v11; i++ {
			v12 := NewPopulatedStreamMsg(r, easy)
			this.Stream[i] = *v12
		}
	}
	v13 := NewPopulatedBlob(r)
	this.Signature = *v13
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randySchema interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneSchema(r randySchema) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringSchema(r randySchema) string {
	v14 := r.Intn(100)
	tmps := make([]rune, v14)
	for i := 0; i < v14; i++ {
		tmps[i] = randUTF8RuneSchema(r)
	}
	return string(tmps)
}
func randUnrecognizedSchema(r randySchema, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldSchema(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldSchema(dAtA []byte, r randySchema, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateSchema(dAtA, uint64(key))
		v15 := r.Int63()
		if r.Intn(2) == 0 {
			v15 *= -1
		}
		dAtA = encodeVarintPopulateSchema(dAtA, uint64(v15))
	case 1:
		dAtA = encodeVarintPopulateSchema(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateSchema(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateSchema(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateSchema(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateSchema(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *StreamMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSchema(uint64(m.Type))
	}
	if m.Index != 0 {
		n += 1 + sovSchema(uint64(m.Index))
	}
	if m.Timestamp != 0 {
		n += 1 + sovSchema(uint64(m.Timestamp))
	}
	l = m.Data.Size()
	n += 1 + l + sovSchema(uint64(l))
	return n
}

func (m *StatusMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OWD != 0 {
		n += 1 + sovSchema(uint64(m.OWD))
	}
	if m.RTT != 0 {
		n += 1 + sovSchema(uint64(m.RTT))
	}
	if m.Jitter != 0 {
		n += 1 + sovSchema(uint64(m.Jitter))
	}
	if m.Battery != 0 {
		n += 5
	}
	if m.Health != 0 {
		n += 5
	}
	return n
}

func (m *ChatMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovSchema(uint64(m.Timestamp))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	return n
}

func (m *EventMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSchema(uint64(m.Id))
	}
	if len(m.Flags) > 0 {
		l = 0
		for _, e := range m.Flags {
			l += sovSchema(uint64(e))
		}
		n += 1 + sovSchema(uint64(l)) + l
	}
	if len(m.Data) > 0 {
		n += 1 + sovSchema(uint64(len(m.Data)*4)) + len(m.Data)*4
	}
	return n
}

func (m *RobotMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	if len(m.Capabilities) > 0 {
		for _, e := range m.Capabilities {
			l = e.Size()
			n += 1 + l + sovSchema(uint64(l))
		}
	}
	return n
}

func (m *RobotMsg_Capability) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSchema(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	return n
}

func (m *Robot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovSchema(uint64(m.Timestamp))
	}
	l = m.Status.Size()
	n += 1 + l + sovSchema(uint64(l))
	l = m.Robot.Size()
	n += 1 + l + sovSchema(uint64(l))
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSchema(uint64(l))
		}
	}
	if len(m.Stream) > 0 {
		for _, e := range m.Stream {
			l = e.Size()
			n += 1 + l + sovSchema(uint64(l))
		}
	}
	l = m.Signature.Size()
	n += 1 + l + sovSchema(uint64(l))
	return n
}

func sovSchema(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSchema(x uint64) (n int) {
	return sovSchema(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *StreamMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamMsg{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatusMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StatusMsg{`,
		`OWD:` + fmt.Sprintf("%v", this.OWD) + `,`,
		`RTT:` + fmt.Sprintf("%v", this.RTT) + `,`,
		`Jitter:` + fmt.Sprintf("%v", this.Jitter) + `,`,
		`Battery:` + fmt.Sprintf("%v", this.Battery) + `,`,
		`Health:` + fmt.Sprintf("%v", this.Health) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChatMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChatMsg{`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMsg{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Flags:` + fmt.Sprintf("%v", this.Flags) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RobotMsg) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCapabilities := "[]RobotMsg_Capability{"
	for _, f := range this.Capabilities {
		repeatedStringForCapabilities += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForCapabilities += "}"
	s := strings.Join([]string{`&RobotMsg{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Capabilities:` + repeatedStringForCapabilities + `,`,
		`}`,
	}, "")
	return s
}
func (this *RobotMsg_Capability) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RobotMsg_Capability{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Robot) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEvents := "[]EventMsg{"
	for _, f := range this.Events {
		repeatedStringForEvents += strings.Replace(strings.Replace(f.String(), "EventMsg", "EventMsg", 1), `&`, ``, 1) + ","
	}
	repeatedStringForEvents += "}"
	repeatedStringForStream := "[]StreamMsg{"
	for _, f := range this.Stream {
		repeatedStringForStream += strings.Replace(strings.Replace(f.String(), "StreamMsg", "StreamMsg", 1), `&`, ``, 1) + ","
	}
	repeatedStringForStream += "}"
	s := strings.Join([]string{`&Robot{`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "StatusMsg", "StatusMsg", 1), `&`, ``, 1) + `,`,
		`Robot:` + strings.Replace(strings.Replace(this.Robot.String(), "RobotMsg", "RobotMsg", 1), `&`, ``, 1) + `,`,
		`Events:` + repeatedStringForEvents + `,`,
		`Stream:` + repeatedStringForStream + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSchema(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *StreamMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= StreamType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OWD", wireType)
			}
			m.OWD = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OWD |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RTT", wireType)
			}
			m.RTT = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RTT |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jitter", wireType)
			}
			m.Jitter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Jitter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Battery", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Battery = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Health", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Health = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchema
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Flags = append(m.Flags, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchema
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchema
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchema
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Flags) == 0 {
					m.Flags = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchema
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Flags = append(m.Flags, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
		case 7:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Data = append(m.Data, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchema
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchema
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchema
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Data) == 0 {
					m.Data = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Data = append(m.Data, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RobotMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RobotMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RobotMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Capabilities = append(m.Capabilities, RobotMsg_Capability{})
			if err := m.Capabilities[len(m.Capabilities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RobotMsg_Capability) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Capability: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Capability: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Robot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Robot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Robot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Robot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Robot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, EventMsg{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stream = append(m.Stream, StreamMsg{})
			if err := m.Stream[len(m.Stream)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSchema(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSchema
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSchema
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSchema
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSchema        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSchema          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSchema = fmt.Errorf("proto: unexpected end of group")
)
